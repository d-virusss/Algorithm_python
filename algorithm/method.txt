# 기본 내장 메소드

1. zip
같은 index에 있는 원소들끼리 묶어서 zip object를 반환한다.
list(zip(a, b)) 같은 형식으로 바꿔서 사용가능함

2. lambda
lambda 인자 : 표현식
>>> (lambda x,y: x + y)(10, 20)
30

3. map
map(함수, 리스트) 형식으로 사용
리스트로부터 원소를 하나씩 꺼내서 함수를 적용시킨 후,
그 결과를 새로운 map object에 담는다.
그래서 보통 list(map(lambda x:x**2, list_name)) 과 같은 방법으로 사용

4. filter
filter(함수, 리스트) 형식으로 사용

>>> list(filter(lambda x: x < 5, range(10)))
[0, 1, 2, 3, 4]


# from collections import Counter
Counter 모듈
Counter(iterable) 형태로 사용한다
리스트의 원소를 카운트하여 dictionary와 유사한 Counter 객체를 반환한다.


# List 메소드

1. sort
>>> a = [1, 10, 5, 7, 6]
>>> a.sort()
>>> a
[1, 5, 6, 7, 10]
>>> a = [1, 10, 5, 7, 6]
>>> a.sort(reverse=True)
>>> a
[10, 7, 6, 5, 1]

2. reverse
>>> a = [1, 10, 5, 7, 6]
>>> a.reverse()
>>> a
[6, 7, 5, 10, 1]

3. sorted(sorted는 리스트를 반환함!)
>>> x = [1 ,11, 2, 3]
>>> y = sorted(x)
>>> x
[1, 11, 2, 3]
>>> y
[1, 2, 3, 11]

# dictionary 메소드
1. keys()
key만 모아서 dict_keys 객체로 돌려준다.
list(dict.keys()) 과 같이 사용하여 list로 바꿀 수 있다.

2. values()
value만 모아서 dict_values 객체로 돌려준다.

3. items()
key, value의 쌍을 튜플로 묶은 값을 dict_items 객체로 돌려준다.

# string 메소드
1. count
txt = "I love apples, apple are my favorite fruit"
x = txt.count("apple")
x
>>> 2

2. startswith
3. split